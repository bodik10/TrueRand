from PyQt4 import QtCore, QtGui
from config import *
from myThread import MyThread
from .resultTableClass import ResultTable

# extended class QStandardItemModel
# now is possible to insert new row to the end
class MyModel (QtGui.QStandardItemModel):
    def __init__(self, rows, cols, infoLabel=None):
        QtGui.QStandardItemModel.__init__(self, rows, cols)
        self.info = infoLabel
        self.dataChanged.connect(self.on_changed)

    def on_changed(self, item):
        newitem = QtGui.QStandardItem("")
        count = self.rowCount()-1
        
        # add row (to the end) for INSERT NEW line in the table
        if item.row() == count and item.data():
           self.setItem(self.rowCount(), 0, newitem)
           
        # if cell (or entire row) is empty - delete row
        elif item.row() != count and not item.data():
            self.takeRow(item.row())
            
        if self.info: self.info.setText("elements: %s" % (self.rowCount()-1))

    def clear(self):
        QtGui.QStandardItemModel.clear(self)
        newitem = QtGui.QStandardItem("")
        self.setItem(0, 0, newitem)

####### BEGIN UI code
# code generated by pyuic.bat (pyuic.bat -x spam.ui -o spam.py)
from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

class Ui_MyWidget(object):
    def setupUi(self, MyWidget):
        MyWidget.setObjectName(_fromUtf8("MyWidget"))
        MyWidget.resize(787, 700)
        self.horizontalLayout = QtGui.QHBoxLayout(MyWidget)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.gridLayout = QtGui.QGridLayout()
        self.gridLayout.setHorizontalSpacing(6)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.groupParam = QtGui.QGroupBox(MyWidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupParam.sizePolicy().hasHeightForWidth())
        self.groupParam.setSizePolicy(sizePolicy)
        self.groupParam.setMinimumSize(QtCore.QSize(300, 0))
        self.groupParam.setMaximumSize(QtCore.QSize(300, 16777215))
        self.groupParam.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.groupParam.setFlat(False)
        self.groupParam.setCheckable(False)
        self.groupParam.setObjectName(_fromUtf8("groupParam"))
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.groupParam)
        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
        self.groupGenerate = QtGui.QGroupBox(self.groupParam)
        self.groupGenerate.setCheckable(True)
        self.groupGenerate.setObjectName(_fromUtf8("groupGenerate"))
        self.verticalLayout_3 = QtGui.QVBoxLayout(self.groupGenerate)
        self.verticalLayout_3.setObjectName(_fromUtf8("verticalLayout_3"))
        self.spinMin = QtGui.QSpinBox(self.groupGenerate)
        self.spinMin.setButtonSymbols(QtGui.QAbstractSpinBox.UpDownArrows)
        self.spinMin.setSuffix(_fromUtf8(""))
        self.spinMin.setMinimum(-1e9)
        self.spinMin.setMaximum(1e9)
        self.spinMin.setObjectName(_fromUtf8("spinMin"))
        self.verticalLayout_3.addWidget(self.spinMin)
        self.spinMax = QtGui.QSpinBox(self.groupGenerate)
        self.spinMax.setButtonSymbols(QtGui.QAbstractSpinBox.UpDownArrows)
        self.spinMax.setMinimum(-1e9)
        self.spinMax.setMaximum(1e9)
        self.spinMax.setProperty("value", 10)
        self.spinMax.setObjectName(_fromUtf8("spinMax"))
        self.verticalLayout_3.addWidget(self.spinMax)
        self.verticalLayout_2.addWidget(self.groupGenerate)
        self.groupLoad = QtGui.QGroupBox(self.groupParam)
        self.groupLoad.setCheckable(True)
        self.groupLoad.setChecked(False)
        self.groupLoad.setObjectName(_fromUtf8("groupLoad"))
        self.verticalLayout_4 = QtGui.QVBoxLayout(self.groupLoad)
        self.verticalLayout_4.setObjectName(_fromUtf8("verticalLayout_4"))
        self.horizontalLayout_4 = QtGui.QHBoxLayout()
        self.horizontalLayout_4.setSpacing(6)
        self.horizontalLayout_4.setObjectName(_fromUtf8("horizontalLayout_4"))
        self.label = QtGui.QLabel(self.groupLoad)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName(_fromUtf8("label"))
        self.horizontalLayout_4.addWidget(self.label)
        self.comboPresets = QtGui.QComboBox(self.groupLoad)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboPresets.sizePolicy().hasHeightForWidth())
        self.comboPresets.setSizePolicy(sizePolicy)
        self.comboPresets.setObjectName(_fromUtf8("comboPresets"))
        self.horizontalLayout_4.addWidget(self.comboPresets)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        self.tableCustomList = QtGui.QTableView(self.groupLoad)
        self.tableCustomList.setMinimumSize(QtCore.QSize(0, 300))
        self.tableCustomList.setObjectName(_fromUtf8("tableCustomList"))
        self.verticalLayout_4.addWidget(self.tableCustomList)
        self.horizontalLayout_6 = QtGui.QHBoxLayout()
        self.horizontalLayout_6.setObjectName(_fromUtf8("horizontalLayout_6"))
        self.btnLoad = QtGui.QPushButton(self.groupLoad)
        self.btnLoad.setObjectName(_fromUtf8("btnLoad"))
        self.btnListClear = QtGui.QPushButton(self.groupLoad)
        self.btnListClear.setObjectName(_fromUtf8("ListClear"))
        self.horizontalLayout_6.addWidget(self.btnLoad)
        self.horizontalLayout_6.addWidget(self.btnListClear)
        self.lblInfo = QtGui.QLabel(self.groupLoad)
        self.lblInfo.setObjectName(_fromUtf8("lblInfo"))
        self.horizontalLayout_6.addWidget(self.lblInfo)
        self.verticalLayout_4.addLayout(self.horizontalLayout_6)
        self.verticalLayout_2.addWidget(self.groupLoad)
        self.btnGenerate = QtGui.QPushButton(self.groupParam)
        self.btnGenerate.setObjectName(_fromUtf8("btnGenerate"))
        self.verticalLayout_2.addWidget(self.btnGenerate)
        self.gridLayout.addWidget(self.groupParam, 0, 0, 1, 1)
        self.frame = QtGui.QFrame(MyWidget)
        self.frame.setFrameShape(QtGui.QFrame.NoFrame)
        #self.frame.setFrameShadow(QtGui.QFrame.Raised)
        self.frame.setObjectName(_fromUtf8("frame"))
        self.horizontalLayout_3 = QtGui.QHBoxLayout(self.frame)
        self.horizontalLayout_3.setObjectName(_fromUtf8("horizontalLayout_3"))
        spacerItem = QtGui.QSpacerItem(20, 458, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.horizontalLayout_3.addItem(spacerItem)
        self.gridLayout.addWidget(self.frame, 1, 0, 1, 1)

        self.horizontalLayout.addLayout(self.gridLayout)

        self.retranslateUi(MyWidget)
        QtCore.QMetaObject.connectSlotsByName(MyWidget)

    def retranslateUi(self, MyWidget):
        MyWidget.setWindowTitle(QtGui.QApplication.translate("MyWidget", "Form", None, QtGui.QApplication.UnicodeUTF8))
        self.groupParam.setTitle(QtGui.QApplication.translate("MyWidget", "Parameters", None, QtGui.QApplication.UnicodeUTF8))
        self.groupGenerate.setTitle(QtGui.QApplication.translate("MyWidget", "Generate sequence", None, QtGui.QApplication.UnicodeUTF8))
        self.spinMin.setPrefix(QtGui.QApplication.translate("MyWidget", "min - ", None, QtGui.QApplication.UnicodeUTF8))
        self.spinMax.setPrefix(QtGui.QApplication.translate("MyWidget", "max - ", None, QtGui.QApplication.UnicodeUTF8))
        self.groupLoad.setTitle(QtGui.QApplication.translate("MyWidget", "Shuffle custom list", None, QtGui.QApplication.UnicodeUTF8))
        self.label.setText(QtGui.QApplication.translate("MyWidget", "Presets:", None, QtGui.QApplication.UnicodeUTF8))
        self.btnLoad.setText(QtGui.QApplication.translate("MyWidget", "Load from file", None, QtGui.QApplication.UnicodeUTF8))
        self.btnListClear.setText(QtGui.QApplication.translate("MyWidget", "Clear", None, QtGui.QApplication.UnicodeUTF8))
        self.lblInfo.setText(QtGui.QApplication.translate("MyWidget", "", None, QtGui.QApplication.UnicodeUTF8))
        self.btnGenerate.setText(QtGui.QApplication.translate("MyWidget", "Generate / Shuffle", None, QtGui.QApplication.UnicodeUTF8))
        
####### END UI code
   
class MyWidget(QtGui.QWidget, Ui_MyWidget, ResultTable):
    def __init__(self, parent=None, master=None):
        QtGui.QWidget.__init__(self, parent)
        self.master = master
        self.error = self.result = self.model = None
        
        self.column = 1
        
        self.setupUi(self)          # set UI (method from Ui_MyWidget)
        ResultTable.__init__(self)  # set UI for result group widget (result table etc...)
        self.tableResult.setSortingEnabled(False) # disable column sorting (keep the items mixed is the point)
        
        self.listModel = MyModel(1, 1, self.lblInfo)
        self.tableCustomList.setModel(self.listModel)
        self.tableCustomList.setEditTriggers(QtGui.QAbstractItemView.AllEditTriggers)
        self.tableCustomList.horizontalHeader().hide()
        self.tableCustomList.setColumnWidth(0, 150)

        self.fillPresetsList()
        
        # one groupPanel disables the other
        self.groupGenerate.toggled.connect(lambda checked: self.groupLoad.setChecked(not checked))
        self.groupLoad.toggled.connect(lambda checked: self.groupGenerate.setChecked(not checked))
        
        self.btnGenerate.clicked.connect(self.generate)
        self.comboPresets.activated["int"].connect(self.setPreset)
        self.btnLoad.clicked.connect(self.loadList)
        self.btnListClear.clicked.connect(lambda: self.listModel.clear())
        self.spinCol.valueChanged["int"].connect(self.changeColumn)
        self.btnClear.clicked.connect(self.clearTable)
        self.btnCopy.clicked.connect(self.copyResult)
        self.btnSave.clicked.connect(self.saveResult)
        
        self.thread = MyThread(self, self.getRandom)
        self.thread.finished.connect(self.errorHandler)

    def fillPresetsList(self):
        for preset in sorted(PRESETS["Sequences"]):
            self.comboPresets.addItem(preset[1:], PRESETS["Sequences"][preset])

    def loadList(self):
        file = QtGui.QFileDialog.getOpenFileName( 
                parent=self, caption="Load data from file", directory=QtCore.QDir.currentPath(),
                filter="CSV and text files (*.csv *.txt)")
        if file:
            sep = QtGui.QInputDialog.getText(self, "Type separator", "Type symbol that will be use for split text data", text=",")
            if not all(sep): return
            data = open(file, 'r').read()
            res=[]
            for l in data.split('\n'):
                res.extend(l.split(sep[0]))

            res = list( filter(lambda x: x.lstrip(), res) )
            
            self.listModel.clear()
            for row in range(len(res)):
                item = QtGui.QStandardItem(res[row])
                self.listModel.setItem(row, 0, item)
            self.tableCustomList.setColumnWidth(0, 150)

            self.log(file=file)

    def setPreset(self, index):
        self.listModel.clear()
        if index == 0: return
        # list stored in comboBox itemData
        l = self.comboPresets.itemData(index)
        for i in range(len(l)):
            item = QtGui.QStandardItem(l[i])
            self.listModel.setItem(i, 0, item)
        self.tableCustomList.setColumnWidth(0, 150)

    def generate(self):
        self.btnGenerate.setDisabled(True)
        self.thread.start()
        
    def getRandom(self):
        if self.groupGenerate.isChecked():  # generate sequence
            min = self.spinMin.value()
            max = self.spinMax.value()
        else:                               # shuffle existing list
            if self.listModel.rowCount() < 2: return
            min = 0
            max = self.listModel.rowCount()-2
            
        result = self.master.random.sequences(min=min, max=max, col=1, format='plain', rnd='new')

        if self.groupLoad.isChecked():      # shuffle custom list
            customList =    [self.listModel.index(i,0).data() for i in range(max+1)]
            result =        [customList[int(i)] for i in result]
        
        if self.checkAdd.isChecked() and type(self.result) is list:
            self.result.extend(result)
        else:
            self.result = result
        self.makeTable()

    def log(self, error=None, file=None):
        from time import strftime
        from os.path import basename

        if file:
            msg = "Custom list (%s elem.) was loaded from '%s' for shuffling" % (self.listModel.rowCount()-1, basename(file))
        elif self.groupLoad.isChecked():
            msg = "Custom list with %s element(s) was shuffled" % (self.listModel.rowCount()-1)
        else:
            msg = "Sequence was generated: min=%s max=%s" % (self.spinMin.value(), self.spinMax.value())
        
        self.master.logs.addRow(
            strftime("%d-%m-%Y"), strftime("%H:%M:%S"), self.master.random.__class__.__name__,
            "Sequences Generator/Shuffler", error if error else msg)
