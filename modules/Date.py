from PyQt4 import QtCore, QtGui
from config import *
from myThread import MyThread
from .resultTableClass import ResultTable

####### BEGIN UI code
# code generated by pyuic.bat (pyuic.bat -x spam.ui -o spam.py)
try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s
    
class Ui_MyWidget(object):
    def setupUi(self, MyWidget):
        MyWidget.setObjectName(_fromUtf8("MyWidget"))
        MyWidget.resize(767, 684)
        self.horizontalLayout = QtGui.QHBoxLayout(MyWidget)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.gridLayout = QtGui.QGridLayout()
        self.gridLayout.setHorizontalSpacing(6)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.groupParam = QtGui.QGroupBox(MyWidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupParam.sizePolicy().hasHeightForWidth())
        self.groupParam.setSizePolicy(sizePolicy)
        self.groupParam.setMinimumSize(QtCore.QSize(300, 0))
        self.groupParam.setMaximumSize(QtCore.QSize(300, 16777215))
        self.groupParam.setTitle(_fromUtf8("Parameters"))
        self.groupParam.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.groupParam.setFlat(False)
        self.groupParam.setCheckable(False)
        self.groupParam.setObjectName(_fromUtf8("groupParam"))
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.groupParam)
        self.verticalLayout_2.setObjectName(_fromUtf8("verticalLayout_2"))
        self.formLayout = QtGui.QFormLayout()
        self.formLayout.setSizeConstraint(QtGui.QLayout.SetDefaultConstraint)
        self.formLayout.setFieldGrowthPolicy(QtGui.QFormLayout.AllNonFixedFieldsGrow)
        self.formLayout.setObjectName(_fromUtf8("formLayout"))
        self.label = QtGui.QLabel(self.groupParam)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(100, 0))
        self.label.setText(_fromUtf8("Date between:"))
        self.label.setObjectName(_fromUtf8("label"))
        self.formLayout.setWidget(0, QtGui.QFormLayout.LabelRole, self.label)
        self.dateEdit = QtGui.QDateEdit(self.groupParam)
        self.dateEdit.setDate(QtCore.QDate(2013, 1, 1))
        self.dateEdit.setDisplayFormat(_fromUtf8("dd.MM.yyyy"))
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName(_fromUtf8("dateEdit"))
        self.formLayout.setWidget(0, QtGui.QFormLayout.FieldRole, self.dateEdit)
        self.label_2 = QtGui.QLabel(self.groupParam)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setText(_fromUtf8("and:"))
        self.label_2.setObjectName(_fromUtf8("label_2"))
        self.formLayout.setWidget(1, QtGui.QFormLayout.LabelRole, self.label_2)
        self.dateEdit_2 = QtGui.QDateEdit(self.groupParam)
        self.dateEdit_2.setDate(QtCore.QDate(2013, 12, 31))
        self.dateEdit_2.setDisplayFormat(_fromUtf8("dd.MM.yyyy"))
        self.dateEdit_2.setCalendarPopup(True)
        self.dateEdit_2.setObjectName(_fromUtf8("dateEdit_2"))
        self.formLayout.setWidget(1, QtGui.QFormLayout.FieldRole, self.dateEdit_2)
        self.label_5 = QtGui.QLabel(self.groupParam)
        self.label_5.setText(_fromUtf8("Date format:"))
        self.label_5.setObjectName(_fromUtf8("label_5"))
        self.formLayout.setWidget(2, QtGui.QFormLayout.LabelRole, self.label_5)
        self.comboFormat = QtGui.QComboBox(self.groupParam)
        self.comboFormat.setObjectName(_fromUtf8("comboFormat"))
        self.comboFormat.addItem(_fromUtf8(""), "%d.%m.%Y")
        self.comboFormat.setItemText(0, _fromUtf8("31.01.2013"))
        self.comboFormat.addItem(_fromUtf8(""), "%d/%m/%Y")
        self.comboFormat.setItemText(1, _fromUtf8("31/01/2013"))
        self.comboFormat.addItem(_fromUtf8(""), "%d %B %Y")
        self.comboFormat.setItemText(2, _fromUtf8("31 January 2013"))
        self.comboFormat.addItem(_fromUtf8(""), "%A, %d %B %Y")
        self.comboFormat.setItemText(3, _fromUtf8("Thursday, 31 January 2013"))
        self.comboFormat.addItem(_fromUtf8(""), "%m.%d.%Y")
        self.comboFormat.setItemText(4, _fromUtf8("1.31.2013"))
        self.comboFormat.addItem(_fromUtf8(""), "%m/%d/%Y")
        self.comboFormat.setItemText(5, _fromUtf8("1/31/2013"))
        self.comboFormat.addItem(_fromUtf8(""), "%B %d, %Y")
        self.comboFormat.setItemText(6, _fromUtf8("January 31, 2013"))
        self.comboFormat.addItem(_fromUtf8(""), "%A, %B %d, %Y")
        self.comboFormat.setItemText(7, _fromUtf8("Thursday, January 31, 2013"))
        self.comboFormat.addItem(_fromUtf8(""), "%Y-%m-%d")
        self.comboFormat.setItemText(8, _fromUtf8("2013-01-31 (ISO 8601)"))
        self.comboFormat.addItem(_fromUtf8(""), "%Y %B %d")
        self.comboFormat.setItemText(9, _fromUtf8("2013 January 31"))
        self.formLayout.setWidget(2, QtGui.QFormLayout.FieldRole, self.comboFormat)
        self.verticalLayout_2.addLayout(self.formLayout)
        self.spinNum = QtGui.QSpinBox(self.groupParam)
        self.spinNum.setButtonSymbols(QtGui.QAbstractSpinBox.UpDownArrows)
        self.spinNum.setPrefix(_fromUtf8("amount of dates - "))
        self.spinNum.setMinimum(1)
        self.spinNum.setMaximum(10000)
        self.spinNum.setObjectName(_fromUtf8("spinNum"))
        self.verticalLayout_2.addWidget(self.spinNum)
        self.label_3 = QtGui.QLabel(self.groupParam)
        self.label_3.setText(_fromUtf8("Which days of the week should be included?"))
        self.label_3.setObjectName(_fromUtf8("label_3"))
        self.verticalLayout_2.addWidget(self.label_3)
        self.chkMon = QtGui.QCheckBox(self.groupParam)
        self.chkMon.setText(_fromUtf8("Monday"))
        self.chkMon.setChecked(True)
        self.chkMon.setObjectName(_fromUtf8("chkMon"))
        self.verticalLayout_2.addWidget(self.chkMon)
        self.chkTue = QtGui.QCheckBox(self.groupParam)
        self.chkTue.setText(_fromUtf8("Tuesday"))
        self.chkTue.setChecked(True)
        self.chkTue.setObjectName(_fromUtf8("chkTue"))
        self.verticalLayout_2.addWidget(self.chkTue)
        self.chkWed = QtGui.QCheckBox(self.groupParam)
        self.chkWed.setText(_fromUtf8("Wednesday"))
        self.chkWed.setChecked(True)
        self.chkWed.setObjectName(_fromUtf8("chkWed"))
        self.verticalLayout_2.addWidget(self.chkWed)
        self.chkThr = QtGui.QCheckBox(self.groupParam)
        self.chkThr.setText(_fromUtf8("Thursday"))
        self.chkThr.setChecked(True)
        self.chkThr.setObjectName(_fromUtf8("chkThr"))
        self.verticalLayout_2.addWidget(self.chkThr)
        self.chkFri = QtGui.QCheckBox(self.groupParam)
        self.chkFri.setText(_fromUtf8("Friday"))
        self.chkFri.setChecked(True)
        self.chkFri.setObjectName(_fromUtf8("chkFri"))
        self.verticalLayout_2.addWidget(self.chkFri)
        self.chkSut = QtGui.QCheckBox(self.groupParam)
        self.chkSut.setText(_fromUtf8("Suturday"))
        self.chkSut.setObjectName(_fromUtf8("chkSut"))
        self.verticalLayout_2.addWidget(self.chkSut)
        self.chkSun = QtGui.QCheckBox(self.groupParam)
        self.chkSun.setText(_fromUtf8("Sunday"))
        self.chkSun.setObjectName(_fromUtf8("chkSun"))
        self.verticalLayout_2.addWidget(self.chkSun)
        self.btnGenerate = QtGui.QPushButton(self.groupParam)
        self.btnGenerate.setText(_fromUtf8("Generate"))
        self.btnGenerate.setObjectName(_fromUtf8("btnGenerate"))
        self.verticalLayout_2.addWidget(self.btnGenerate)
        self.label_4 = QtGui.QLabel(self.groupParam)
        self.label_4.setText(_fromUtf8("<html><head/><body><p><span style=\" font-size:7pt; color:#585858;\">Note: The dates generated with this form will be picked without replacement (like lottery tickets drawn from a hat) and each date will therefore only occur once.</span></p></body></html>"))
        self.label_4.setWordWrap(True)
        self.label_4.setObjectName(_fromUtf8("label_4"))
        self.verticalLayout_2.addWidget(self.label_4)
        self.gridLayout.addWidget(self.groupParam, 0, 0, 1, 1)
        
        self.frame = QtGui.QFrame(MyWidget)
        self.frame.setFrameShape(QtGui.QFrame.NoFrame)
        self.frame.setFrameShadow(QtGui.QFrame.Plain)
        self.frame.setObjectName(_fromUtf8("frame"))
        self.horizontalLayout_3 = QtGui.QHBoxLayout(self.frame)
        self.horizontalLayout_3.setObjectName(_fromUtf8("horizontalLayout_3"))
        spacerItem = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.horizontalLayout_3.addItem(spacerItem)
        self.gridLayout.addWidget(self.frame, 1, 0, 1, 1)
        self.horizontalLayout.addLayout(self.gridLayout)

        self.retranslateUi(MyWidget)
        QtCore.QMetaObject.connectSlotsByName(MyWidget)

    def retranslateUi(self, MyWidget):
        MyWidget.setWindowTitle(QtGui.QApplication.translate("MyWidget", "Form", None, QtGui.QApplication.UnicodeUTF8))
        self.groupParam.setTitle(QtGui.QApplication.translate("MyWidget", "Parameters", None, QtGui.QApplication.UnicodeUTF8))

####### END UI code
   
class MyWidget(QtGui.QWidget, Ui_MyWidget, ResultTable):
    def __init__(self, parent=None, master=None):
        QtGui.QWidget.__init__(self, parent)
        self.master = master
        self.error = self.result = self.model = None
        self.daysOfWeek = [0,1,2,3,4]
        
        self.column = 1
        
        self.setupUi(self)          # set UI (method from Ui_MyWidget)
        ResultTable.__init__(self)  # set UI for result group widget (result table etc...)
        
        self.btnGenerate.clicked.connect(self.generate)
        self.chkMon.toggled.connect(lambda x: self.updateDaysOfWeek(x, 0))
        self.chkTue.toggled.connect(lambda x: self.updateDaysOfWeek(x, 1))
        self.chkWed.toggled.connect(lambda x: self.updateDaysOfWeek(x, 2))
        self.chkThr.toggled.connect(lambda x: self.updateDaysOfWeek(x, 3))
        self.chkFri.toggled.connect(lambda x: self.updateDaysOfWeek(x, 4))
        self.chkSut.toggled.connect(lambda x: self.updateDaysOfWeek(x, 5))
        self.chkSun.toggled.connect(lambda x: self.updateDaysOfWeek(x, 6))
            
        self.thread = MyThread(self, self.getRandom)
        self.thread.finished.connect(self.errorHandler)

    def updateDaysOfWeek(self, isChecked, day):
        if isChecked:   self.daysOfWeek.append(day)
        else:           self.daysOfWeek.remove(day)
        
    def generate(self):       
        self.btnGenerate.setDisabled(True)
        self.thread.start()
        
    def getRandom(self):
        assert self.daysOfWeek, "Error: You should choose at least one day of the week"
        
        from datetime import date, timedelta
        day = timedelta(days=1)
        
        num = self.spinNum.value()
        date1 = currDate = self.dateEdit.date().toPyDate()
        date2 = self.dateEdit_2.date().toPyDate()
        format = self.comboFormat.itemData(self.comboFormat.currentIndex())
        
        assert date2 > date1, "Error: Second date must be greater than first one"
        
        allDaysList = []
        while currDate != date2:
            if currDate.weekday() in self.daysOfWeek:
                allDaysList.append(currDate)
            currDate += day
        
        assert num <= len(allDaysList), "Error: There are only %s acceptable dates, when you need %s" % (len(allDaysList), num)

        result = []
        if len(allDaysList) == num:
            result = allDaysList
        else:
            while len(result) < num:
                result.append(
                    allDaysList.pop(
                        int( self.master.random.integers(num=1, min=0, max=len(allDaysList)-1, base='10', col=1, format='plain', rnd='new')[0] )
                    )
                )

        result = [d.strftime(format) for d in result]      
                                            
        if self.checkAdd.isChecked() and type(self.result) is list:
            self.result.extend(result)
        else:
            self.result = result
        # print(self.result)
        self.makeTable()
        
        
    def log(self, error=None):
        from time import strftime
        self.master.logs.addRow(strftime("%d-%m-%Y"),
                                strftime("%H:%M:%S"),
                                self.master.random.__class__.__name__,
                                "Date Generator",
                                error if error else "Generated %s date(s) between %s and %s" % (
                                    self.spinNum.value(),
                                    self.dateEdit.textFromDateTime(self.dateEdit.dateTime()),
                                    self.dateEdit_2.textFromDateTime(self.dateEdit_2.dateTime()))
                                )
